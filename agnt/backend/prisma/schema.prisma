// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String?
  lastName    String?
  avatarUrl   String?
  role        UserRole @default(INVESTOR)
  kycStatus   KYCStatus @default(PENDING)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  profile      UserProfile?
  portfolios   Portfolio[]
  investments  Investment[]
  transactions Transaction[]
  kycData      KYCData?
  notifications Notification[]
  aiSessions   AISession[]
  createdAssets Asset[]

  @@map("users")
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  dateOfBirth       DateTime?
  phoneNumber       String?
  address           String?
  city              String?
  country           String?
  postalCode        String?
  investmentGoals   String?
  riskTolerance     RiskTolerance @default(MEDIUM)
  investmentHorizon String?
  netWorth          Float?
  annualIncome      Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Asset {
  id                String      @id @default(cuid())
  name              String
  description       String      @db.Text
  category          AssetCategory
  subCategory       String?
  totalValue        Float
  tokenPrice        Float
  totalSupply       Int
  availableSupply   Int
  minimumInvestment Float       @default(100)
  location          String?
  images            Json?
  documents         Json?
  metadata          Json?
  status            AssetStatus @default(PENDING)
  
  // AI Analysis
  aiScore           Float?
  riskRating        RiskRating?
  predictedROI      Float?
  marketTrend       MarketTrend?
  
  // Blockchain
  contractAddress   String?
  tokenSymbol       String?
  blockchain        Blockchain?
  deploymentTxHash  String?
  
  // Compliance
  legalStructure    String?
  jurisdiction      String?
  regulatoryStatus  String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  launchDate        DateTime?
  
  // Relationships
  creator           User?        @relation(fields: [creatorId], references: [id])
  creatorId         String?
  investments       Investment[]
  transactions      Transaction[]
  priceHistory      PriceHistory[]
  aiAnalysis        AIAnalysis[]
  complianceChecks  ComplianceCheck[]
  valuations        Valuation[]
  portfolioItems    PortfolioItem[]

  @@map("assets")
}

model Portfolio {
  id            String   @id @default(cuid())
  userId        String
  name          String
  description   String?     @db.Text
  totalValue    Float    @default(0)
  totalCost     Float    @default(0)
  totalReturn   Float    @default(0)
  returnPercent Float    @default(0)
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items PortfolioItem[]

  @@map("portfolios")
}

model PortfolioItem {
  id          String   @id @default(cuid())
  portfolioId String
  assetId     String
  quantity    Int
  averagePrice Float
  currentValue Float
  totalCost   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  asset     Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, assetId])
  @@map("portfolio_items")
}

model Investment {
  id                String           @id @default(cuid())
  userId            String
  assetId           String
  quantity          Int
  pricePerToken     Float
  totalAmount       Float
  investmentType    InvestmentType   @default(BUY)
  status            InvestmentStatus @default(PENDING)
  transactionHash   String?
  blockNumber       Int?
  gasUsed           Int?
  gasFee            Float?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset        Asset         @relation(fields: [assetId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("investments")
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  assetId         String?
  investmentId    String?
  type            TransactionType
  amount          Float
  quantity        Int?
  pricePerUnit    Float?
  fee             Float             @default(0)
  status          TransactionStatus @default(PENDING)
  transactionHash String?
  blockNumber     Int?
  gasUsed         Int?
  gasFee          Float?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset      Asset?      @relation(fields: [assetId], references: [id])
  investment Investment? @relation(fields: [investmentId], references: [id])

  @@map("transactions")
}

model PriceHistory {
  id        String   @id @default(cuid())
  assetId   String
  price     Float
  volume    Int?
  high      Float?
  low       Float?
  timestamp DateTime @default(now())

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model AIAnalysis {
  id                String      @id @default(cuid())
  assetId           String
  analysisType      AnalysisType
  aiModel           String
  confidence        Float
  result            Json
  insights          Json?
  recommendations   Json?
  riskFactors       Json?
  marketConditions  Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("ai_analysis")
}

model AISession {
  id          String        @id @default(cuid())
  userId      String
  sessionType SessionType
  messages    Json?
  context     Json?
  status      SessionStatus @default(ACTIVE)
  startedAt   DateTime      @default(now())
  endedAt     DateTime?
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_sessions")
}

model KYCData {
  id                String    @id @default(cuid())
  userId            String    @unique
  documentType      String
  documentNumber    String
  documentUrl       String
  verificationStatus KYCStatus @default(PENDING)
  verifiedAt        DateTime?
  notes             String?     @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kyc_data")
}

model ComplianceCheck {
  id          String           @id @default(cuid())
  assetId     String
  checkType   ComplianceType
  status      ComplianceStatus @default(PENDING)
  result      Json?
  notes       String?     @db.Text
  checkedBy   String?
  checkedAt   DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("compliance_checks")
}

model Valuation {
  id            String          @id @default(cuid())
  assetId       String
  valuationType ValuationType
  value         Float
  methodology   String
  assessor      String?
  validUntil    DateTime?
  notes         String?     @db.Text
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("valuations")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean            @default(false)
  metadata  Json?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String      @db.Text
  description String?     @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

// Enums
enum UserRole {
  ADMIN
  ASSET_MANAGER
  INVESTOR
  COMPLIANCE_OFFICER
  AUDITOR
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum RiskTolerance {
  LOW
  MEDIUM
  HIGH
}

enum AssetCategory {
  REAL_ESTATE
  FINE_ART
  LUXURY_GOODS
  COMMODITIES
  COLLECTIBLES
  INTELLECTUAL_PROPERTY
  WINE_SPIRITS
  PRIVATE_EQUITY
  DEBT_INSTRUMENTS
  OTHER
}

enum AssetStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  TOKENIZED
  LIVE
  PAUSED
  CLOSED
  REJECTED
}

enum RiskRating {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum MarketTrend {
  BULLISH
  BEARISH
  NEUTRAL
  VOLATILE
}

enum Blockchain {
  ETHEREUM
  POLYGON
  BINANCE_SMART_CHAIN
  AVALANCHE
  ARBITRUM
  OPTIMISM
  SOLANA
  CARDANO
}

enum InvestmentType {
  BUY
  SELL
  TRANSFER
}

enum InvestmentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BUY
  SELL
  TRANSFER
  FEE
  DIVIDEND
  INTEREST
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum AnalysisType {
  MARKET_ANALYSIS
  RISK_ASSESSMENT
  PRICE_PREDICTION
  SENTIMENT_ANALYSIS
  TECHNICAL_ANALYSIS
  FUNDAMENTAL_ANALYSIS
}

enum SessionType {
  TOKENIZATION
  INVESTMENT_ADVICE
  PORTFOLIO_OPTIMIZATION
  RISK_ASSESSMENT
  MARKET_ANALYSIS
  COMPLIANCE
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum ComplianceType {
  KYC
  AML
  ACCREDITED_INVESTOR
  REGULATORY_FILING
  TAX_COMPLIANCE
  LEGAL_REVIEW
}

enum ComplianceStatus {
  PENDING
  PASSED
  FAILED
  UNDER_REVIEW
  EXPIRED
}

enum ValuationType {
  MARKET_VALUE
  APPRAISED_VALUE
  BOOK_VALUE
  REPLACEMENT_VALUE
  LIQUIDATION_VALUE
}

enum NotificationType {
  SYSTEM
  INVESTMENT
  MARKET
  COMPLIANCE
  SECURITY
  PROMOTION
} 